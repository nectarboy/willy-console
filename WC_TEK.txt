; ==== WILLY CONSOLE - TECHNICAL REFERENCE ==== ;
  nectarboy - 2021

; ==== Console Specs ==== ;

CPU: 8 bit willy-CPU
Runs at 2,409,960 hertz

Resolution: 128x112 pixels
Color: RGB
Refresh Rate: 60hz

Sound: idk

; ==== Memory Specs ==== ;

Willy Console can address up to 0xffff bytes of memory.
It has a 16 bit program counter, and a number of 16 bit instructions to do whatever with it.

; ---- Memory Map

    +--------------------+
    | ROM                |
    |  0x0000 - 0x5fff   |
    |                    |
    |                    |
    |                    |
    |                    |
    +--------------------+
    | VRAM               |
    |  0x6000 - 0x7fff   |
    +--------------------+
    | OM: 0x8000 - 0x80ef|
    +--------------------+
    | PM: 0x80d0 - 0x80ff|
    +--------------------+
    | EM: 0x8100 - 0x8fff|
    +--------------------+
    |      -------       |
    +--------------------+
    | WRAM               |
    |  0xa000 - 0xcfff   |
    |                    |
    +--------------------+
    |      -------       |
    |      -------       |
    +--------------------+
    | IO: 0xf000 - 0xf0ff|
    +--------------------+
    | HI: 0xf100 - 0xffff|
    +--------------------+

; ---- Memory Usage

ROM: 0x6000 bytes of ROM found in cartridge.
If none is available, it just acts as unused memory.

VRAM: 0x2000 bytes of VRAM - made up of tiledata, tilemap, and palletemap.

OM: 0xd0 bytes of object/sprite memory. (4 bytes per entry)
PM: 0x30 bytes of pallete entry data (3 bytes per entry)

EM: 0xf00 bytes of external RAM found in a cartridge. Can be used for save data, extra ram, or anything.
If none is available, it just acts as unused memory.

WRAM: 0x3000 bytes of work RAM.

IO: 0x100 bytes of memory mapped io registers.
HI: 0xf00 bytes of hi-RAM used for usually storing temporary data.

Address spaces marked in a ------- represent 0x1000 spaces of unused memory each.
dont try to use em cuz u cant write or read from em (reads return 0xff)

; ==== CPU Specs ==== ;

; ==== Video Specs ==== ;

; ---- BG MODE 0 - Tile Mode

Mode 0 is a tilemap mode, in which VRAM is split into 3 seperate parts:
- tile data     (0x6000 - 0x6fff)
- tile map      (0x7000 - 0x70ff)
- pallete map   (0x7100 - 0x717f)

; Tile data
Tile data spans from 0x6000 - 0x6fff, each entry is a 2bpp 8x8 tile, making up 16 bytes. This allows up to 256 unique tiledata entries.

; Tile map
Tile map spans from 0x7000 - 0x70ff. It is made up of 16x16 tile index entries, representing 256 bytes that make up the BG.
Entries in the tilemap point to any entry in tiledata to draw; each entry takes one byte.

; Pallete map
Pallete map spans from 0x7100 - 0x717f (128 bytes), it is made up of 256 4-bit entries, meaning each byte represents 2 entries.
This area changes its meaning depending on the pallete mode.

In pallete mode 0:
Entries correspond to what pallete the tile in tilemap [entry index] will use.
For example: If palletemap entry 0x10 were 5, then tile at tilemap entry 0x10 will be displayed with pallete 5.  

In pallete mode 1:
Entries correspond to what pallete any tilemap entry with a specific index will use.
For example: If palletemap entry 0x0 were 3, then any tile in tilemap entry with the value 0x0 will use pallete 3.

Here's a formula to convert 8 bit colors to RGB, if u wanna make an emu or sumn:
  R = (color >> 5) << 5
  G = ((color & 28) >> 2) << 5
  B = (color & 3) << 6

The remaining space left in VRAM (0x7180 - 0x7fff) is not used but is fully R/W.

; ---- BG MODE 1 - Bitmap Mode

Mode 1 transforms the entirety of vram into a bitmap, each pixel capable of displaying one of 16 colors.
Like mode 0, it is fully capable of scrolling as well, however objects are not displayed in this mode.

Each pixel in the bitmap is represented by a 4-bit index pointing to a pallete located in PM, meaning each byte in VRAM represents 2 entries.
Instead of pallete entries being used as 3 seperate colors, an entry in PM is used as a 24-bit RGB color.

Mode 1 is not affected by the pallete mode.

[ maybe we could add a dma for video ? ]

; ---- OM - Object Memory

Object memory is a part of memory dedicated to object/sprite attributes.
There are 4 bytes per entry; these bytes are: x-coord, y-coord, tile index, and properties.

This is what each OM entry looks like:

    +----------------------------+
    | X-Coordinate               |
    |  (+ 8)                     |
    +----------------------------+
    | Y-Coordinate               |
    |  (+ 8)                     |
    +----------------------------+
    | Tile Index                 |
    |  (what tile its drawn as)  |
    +----------------------------+
    | Properties                 |
    |  bit 7: ??                 |
    |  bit 6: ??                 |
    |  bit 5: x-flip 1=yes 0=no  |
    |  bit 4: y-flip 1=yes 0=no  |
    |  bit 3-0: pallete index    |
    +----------------------------+

NOTES:
- Bit 7 and 6 in properties are R/W, but they have no known purpose.
- Don't confuse pallete index with the BG pallete behavior !
  This pallete index just points to a pallete entry in PM for object to use.

Despite OM being capable of holding 52 objects, only 32 of said objects can actually be rendered.
This is due to hardware constraints (lmao). The remaining bytes are still R/W however.
